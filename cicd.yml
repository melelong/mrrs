version: '3'
networks: # 定义网络
  cicd_network:
    driver: bridge
    ipam:
      config:
        - subnet: 192.168.0.0/16

services: # 集合
  docker_node:
    user: root # 为了避免一些权限问题 在这我使用了root
    restart: always # 重启方式
    image: jenkins/jenkins:alpine3.19-jdk21 # 指定服务所使用的镜像 在这里我选择了 alpine
    container_name: jenkins # 容器名称
    ports: # 对外暴露的端口定义
      - 8080:8080
      - 50000:50000
    volumes: # 卷挂载路径
      - /www/cicd/Jenkins/jenkins_home:/var/jenkins_home # 这是我们一开始创建的目录挂载到容器内的jenkins_home目录
      - /www/cicd/Jenkins/logs:/var/log/jenkins # 日志
      - /run/docker.sock:/run/docker.sock # 进程
      - /usr/bin/docker:/usr/bin/docker # 这是为了我们可以在容器内使用宿主机docker命令
      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose
    networks:
      cicd_network:
        ipv4_address: 192.168.0.2 # 指定Jenkins服务的静态IP地址

  docker_nginx:
    restart: always
    image: nginx:stable-alpine3.17-perl
    container_name: cicd_nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - /www/cicd/nginx/config:/etc/nginx # 配置
      - /www/cicd/nginx/logs:/var/log/nginx # 日志
      - /www/cicd/nginx/html:/usr/share/nginx/html # 静态资源
    networks:
      cicd_network:
        ipv4_address: 192.168.0.3 # 指定Nginx服务的静态IP地址
